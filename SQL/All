570. Managers with at Least 5 Direct Reports

HAving can carry count, sum, such functs which where cannot

# Write your MySQL query statement below
SELECT E1.name
FROM Employee E1
JOIN Employee E2 ON E1.id=E2.managerId
GROUP BY E2.managerId
HAVING COUNT(E2.managerId)>=5;


1934. Confirmation Rate

use of avg

# Write your MySQL query statement below
SELECT S.user_id, ROUND(AVG( if(C.action = "confirmed",1,0)) , 2) AS confirmation_rate
FROM Signups S
LEFT JOIN Confirmations C
ON S.user_id = C.user_id
GROUP BY S.user_id

1193. Monthly Transactions I

DATE_FORMAT(trans_date, '%Y-%m'), SUBSTRING(trans_date,1,7), '
try to use sum when using conditions even if you need count use 1 or 0 if(cond, 1,0)

SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country, COUNT(id) AS trans_count, SUM(CASE WHEN state = "approved" THEN 1 ELSE 0 END) AS approved_count,SUM(amount) AS trans_total_amount, SUM(CASE WHEN state = "approved" THEN amount ELSE 0 END)AS approved_total_amount
FROM Transactions
GROUP BY month, country

SELECT SUBSTRING(trans_date,1,7) AS month,
country,
COUNT(id) AS trans_count,
SUM(IF(state = 'approved' ,1,0)) AS approved_count,
SUM(amount)AS trans_total_amount,
SUM(IF(state = 'approved',amount,0))AS approved_total_amount
FROM Transactions
GROUP BY month, country

1174. Immediate Food Delivery II

/*SELECT ROUND(SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END
)/COUNT(customer_id)*100,2) AS immediate_percentage
FROM Delivery
WHERE (customer_id,order_date) IN
(SELECT customer_id, MIN(order_date)
FROM Delivery
GROUP BY customer_id)

Why Not Use COUNT?
If we used COUNT in this scenario:

sql
Copy
Edit
COUNT(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END)
Hereâ€™s what would happen:

COUNT only counts non-NULL values.
Since CASE always returns either 1 or 0 (and neither of these is NULL), COUNT would count all rows, not just the rows where the condition is true.


*/
WITH FIRSTORDERS AS (
    SELECT customer_id, order_date, customer_pref_delivery_date,
    RANK() OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS rankmin
    FROM Delivery
)
SELECT ROUND(SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END )/COUNT(customer_id)*100,2) AS immediate_percentage
FROM FIRSTORDERS
WHERE rankmin = 1


196. Delete Duplicate Emails

DELETE P1
FROM Person P1, Person P2
WHERE P1.email=P2.email AND P1.id>P2.id


DELETE FROM Person WHERE id NOT IN (SELECT minid FROM(SELECT MIN(id) AS minid
FROM Person
GROUP BY email) AS A)
/*
Understanding MySQL's Limitation
In MySQL, you cannot directly delete rows while selecting from the same table in a subquery. If you try this query:


DELETE FROM Person
WHERE Id NOT IN (SELECT MIN(Id) FROM Person GROUP BY Email);
It may throw the error:

"You can't specify target table 'Person' for update in FROM clause"

This happens because MySQL does not allow modifying and selecting from the same table in a subquery at the same time.
*/


176. Second Highest Salary

SELECT (SELECT DISTINCT salary
FROM Employee
ORDER BY salary DESC
LIMIT 1 OFFSET 1) AS SecondHighestSalary

SELECT (SELECT DISTINCT salary
FROM Employee
ORDER BY salary DESC
LIMIT 1 OFFSET 1) AS SecondHighestSalary

/*
OFFSET is to remove.
offset is performed first and then limit is
so 1st record removed and next record returned.*/

1484. Group Sold Products By The Date

Concatenates distinct product names for each date.
Ensures the product names are sorted lexicographically (alphabetically).
Uses , as a separator.


SELECT sell_date, COUNT( DISTINCT product) AS num_sold,
GROUP_CONCAT( DISTINCT product)AS products
FROM Activities
GROUP BY sell_date
/*
GROUP_CONCAT()
Concatenates distinct product names for each date.
Ensures the product names are sorted lexicographically (alphabetically).
Uses , as a separator.

SELECT sell_date,
       COUNT(DISTINCT product) AS num_sold,
       GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR ', ') AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date;



1978. Employees Whose Manager Left the Company

/*SELECT employee_id
FROM Employees
WHERE salary<30000
and manager_id not in
(SELECT employee_id FROM Employees )
ORDER BY employee_id*/
/*
SELECT E1.employee_id
FROM Employees E1
LEFT JOIN Employees E2
ON E1.manager_id = E2.employee_id
WHERE E1.salary<30000
AND E1.manager_id IS NOT NULL
AND E2.employee_id IS NULL
ORDER BY employee_id
*/

SELECT employee_id
FROM Employees E
WHERE salary<30000
AND manager_id IS NOT NULL
AND NOT EXISTS (SELECT 1 FROM Employees M WHERE  M.employee_id =E.manager_id)
ORDER BY employee_id


NOT EXISTS---
SELECT 1 FROM Employees M WHERE  M.employee_id =E.manager_id- only checking if a row exists or not.
if 1 is returned means row exists, then not exists is false else true.


626. Exchange Seats

SELECT
    CASE
    WHEN id%2 = 1 AND id != (SELECT MAX(id) FROM Seat) THEN id+1
    WHEN id%2=0 THEN (id-1)
    ELSE id END AS id,
    student
FROM Seat
ORDER BY id

/*LEAD(id) OVER (ORDER BY id)
LAG(id) OVER (ORDER BY id)
CANNOT USE ONLY LEAD AND ONLY LAG
 */


















